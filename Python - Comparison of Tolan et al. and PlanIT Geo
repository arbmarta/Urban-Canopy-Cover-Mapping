// Display the census area shapefiles
var block_groups = ee.FeatureCollection('users/alexjfmartin/Block_Groups');
var census_tracts = ee.FeatureCollection('users/alexjfmartin/Census_Tracts');
var urban_areas = ee.FeatureCollection('users/alexjfmartin/Urban_Areas');

// Define the canopy height image and apply a mask for canopy height >= 1 meter
var canopyHeight = ee.ImageCollection('projects/meta-forest-monitoring-okw37/assets/CanopyHeight').mosaic();
var maskedCanopyHeight = canopyHeight.updateMask(canopyHeight.gte(1));  // Mask out values < 1

// Center the map on the specified geometry region
Map.centerObject(urban_areas, 10);  // Adjust zoom as needed

// Visualization settings
var palettes = require('users/gena/packages:palettes');

// Other layers for reference
var ethcanopyheight_block_groups = ee.Image('users/nlang/ETH_GlobalCanopyHeight_2020_10m_v1');
Map.addLayer(ethcanopyheight_block_groups.clip(block_groups), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height Lang 2022 98%', false);

var umdheight_block_groups = ee.ImageCollection("users/potapovpeter/GEDI_V27").mosaic();
Map.addLayer(umdheight_block_groups.clip(block_groups), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height Potapov 2021 95%', false);

var ethcanopyheight_census_tracts = ee.Image('users/nlang/ETH_GlobalCanopyHeight_2020_10m_v1');
Map.addLayer(ethcanopyheight_census_tracts.clip(census_tracts), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height Lang 2022 98%', false);

var umdheight_census_tracts = ee.ImageCollection("users/potapovpeter/GEDI_V27").mosaic();
Map.addLayer(umdheight_census_tracts.clip(census_tracts), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height Potapov 2021 95%', false);

var ethcanopyheight_urban_areas = ee.Image('users/nlang/ETH_GlobalCanopyHeight_2020_10m_v1');
Map.addLayer(ethcanopyheight_urban_areas.clip(urban_areas), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height Lang 2022 98%', false);

var umdheight_urban_areas = ee.ImageCollection("users/potapovpeter/GEDI_V27").mosaic();
Map.addLayer(umdheight_urban_areas.clip(urban_areas), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height Potapov 2021 95%', false);

// Our layers (display maskedCanopyHeight)
Map.addLayer(maskedCanopyHeight.clip(block_groups), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height >= 1 [meters]');

Map.addLayer(maskedCanopyHeight.clip(census_tracts), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height >= 1 [meters]');

Map.addLayer(maskedCanopyHeight.clip(urban_areas), {
    min: 0,
    max: 25,
    palette: palettes.matplotlib.viridis[7]
}, 'Canopy Height >= 1 [meters]');

// Export function
function exportCanopyHeight_block_groups() {
    Export.image.toDrive({
        image: maskedCanopyHeight.clip(block_groups),  // Use masked image for export
        description: 'CanopyHeight_Export_Block_Groups',
        folder: 'EarthEngineExports',
        region: block_groups.geometry().bounds(),
        scale: 1,
        fileFormat: 'GeoTIFF',
        maxPixels: 1e13
    });
}

function exportCanopyHeight_census_tracts() {
    Export.image.toDrive({
        image: maskedCanopyHeight.clip(census_tracts),  // Use masked image for export
        description: 'CanopyHeight_Export_Census_Tracts',
        folder: 'EarthEngineExports',
        region: census_tracts.geometry().bounds(),
        scale: 1,
        fileFormat: 'GeoTIFF',
        maxPixels: 1e13
    });
}

function exportCanopyHeight_urban_areas() {
    Export.image.toDrive({
        image: maskedCanopyHeight.clip(urban_areas),  // Use masked image for export
        description: 'CanopyHeight_Export_Urban_Areas',
        folder: 'EarthEngineExports',
        region: urban_areas.geometry().bounds(),
        scale: 1,
        fileFormat: 'GeoTIFF',
        maxPixels: 1e13
    });
}

// Create export button (this is optional; you can just run `exportCanopyHeight` directly)
var exportButtonBlockGroups = ui.Button({
    label: 'Export Block Groups Canopy Height',
    style: {width: '200px', color: '#4CAF50'},
    onClick: exportCanopyHeight_block_groups
});

var exportButtonCensusTracts = ui.Button({
    label: 'Export Census Tracts Canopy Height',
    style: {width: '200px', color: '#4CAF50'},
    onClick: exportCanopyHeight_census_tracts
});

var exportButtonUrbanAreas = ui.Button({
    label: 'Export Urban Areas Canopy Height',
    style: {width: '200px', color: '#4CAF50'},
    onClick: exportCanopyHeight_urban_areas
});

// Display the export button (optional)
var controlPanel = ui.Panel({
    widgets: [exportButtonBlockGroups, exportButtonCensusTracts, exportButtonUrbanAreas]
});
ui.root.add(controlPanel);

// Extract the PlanIt Geo urban tree canopy area (%) (most current imagery) ("UTC_Pct_y2") from the shapefiles
var block_groups_canopycover = block_groups.aggregate_array('UTC_Pct_y2');
var census_tract_canopycover = census_tracts.aggregate_array('UTC_Pct_y2');
var urban_areas_canopycover = urban_areas.aggregate_array('UTC_Pct_y2');

// Extract the PlanIt Geo urban tree canopy area (%) (historic imagery) ("UTC_Pct_y1") from the shapefiles
var block_groups_canopycover_historic = block_groups.aggregate_array('UTC_Pct_y1');
var census_tract_canopycover_historic = census_tracts.aggregate_array('UTC_Pct_y1');
var urban_areas_canopycover_historic = urban_areas.aggregate_array('UTC_Pct_y1');

// Create a canopy cover chart for each PlanIt Geo canopy cover percentage from the shapefiles
function createCanopyCoverChart(dataArray, title) {
    return ui.Chart.array.values({
        array: dataArray,
        axis: 0
    }).setOptions({
        title: title,
        hAxis: {title: 'Polygon Index'},
        vAxis: {title: 'Canopy Cover (%)'},
        pointSize: 4
    });
}

print(createCanopyCoverChart(block_groups_canopycover, 'Canopy Cover (%) for Block Groups'));
print(createCanopyCoverChart(census_tract_canopycover, 'Canopy Cover (%) for Census Tracts'));
print(createCanopyCoverChart(urban_areas_canopycover, 'Canopy Cover (%) for Urban Areas'));

print(createCanopyCoverChart(block_groups_canopycover_historic, 'Canopy Cover (%) for Block Groups (Historic)'));
print(createCanopyCoverChart(census_tract_canopycover_historic, 'Canopy Cover (%) for Census Tracts (Historic)'));
print(createCanopyCoverChart(urban_areas_canopycover_historic, 'Canopy Cover (%) for Urban Areas (Historic)'));

// Define shapefiles
var block_groups = ee.FeatureCollection('users/alexjfmartin/Block_Groups');
var census_tracts = ee.FeatureCollection('users/alexjfmartin/Census_Tracts');
var urban_areas = ee.FeatureCollection('users/alexjfmartin/Urban_Areas');

// Define canopy height raster
var canopyHeight = ee.ImageCollection('projects/meta-forest-monitoring-okw37/assets/CanopyHeight').mosaic();
var maskedCanopyHeight = canopyHeight.updateMask(canopyHeight.gte(1)); // Canopy >= 1m

// Function to process each shapefile and generate the plot
function processShapefile(featureCollection, name) {
  // Compute raster-derived canopy cover percentage
  var processedFeatures = featureCollection.map(function(feature) {
    var totalPixels = maskedCanopyHeight.reduceRegion({
      reducer: ee.Reducer.count(),
      geometry: feature.geometry(),
      scale: 10,
      maxPixels: 1e13
    }).get('b1'); // Replace 'b1' with the correct band name if needed

    var canopyPixels = maskedCanopyHeight.updateMask(maskedCanopyHeight.gte(1)).reduceRegion({
      reducer: ee.Reducer.count(),
      geometry: feature.geometry(),
      scale: 10,
      maxPixels: 1e13
    }).get('b1');

    // Calculate percentage of canopy pixels
    var canopyPercent = ee.Number(canopyPixels).divide(ee.Number(totalPixels)).multiply(100);

    // Add as property to the feature
    return feature.set({
      Raster_Canopy_Percent: canopyPercent
    });
  });

  // Extract PlanIT Geo and raster canopy cover percentages
  var comparisonData = processedFeatures.map(function(feature) {
    return ee.Feature(null, {
      PlanIT_Geo_Percent: feature.get('UTC_Pct_y2'),
      Raster_Canopy_Percent: feature.get('Raster_Canopy_Percent')
    });
  });

  // Convert FeatureCollection to a chart-compatible format
  var chartData = comparisonData.reduceColumns({
    reducer: ee.Reducer.toList(2),
    selectors: ['PlanIT_Geo_Percent', 'Raster_Canopy_Percent']
  });

  var xData = ee.List(chartData.get('list')).map(function(el) {
    return ee.List(el).get(0); // PlanIT Geo values
  });
  var yData = ee.List(chartData.get('list')).map(function(el) {
    return ee.List(el).get(1); // Raster canopy cover values
  });

  // Create scatter plot
  var scatterPlot = ui.Chart.array.values({
    array: ee.Array.cat([xData, yData], 1),
    axis: 0
  })
  .setChartType('ScatterChart')
  .setOptions({
    title: 'Comparison of Canopy Cover (PlanIT Geo vs Raster) - ' + name,
    hAxis: {title: 'PlanIT Geo Canopy Cover (%)'},
    vAxis: {title: 'Raster-Derived Canopy Cover (%)'},
    pointSize: 5,
    series: {0: {color: 'blue'}}
  });

  // Add diagonal reference line (0,0 to 100,100)
  var refLine = ui.Chart.array.values({
    array: ee.Array([[0, 0], [100, 100]]),
    axis: 0
  })
  .setChartType('LineChart')
  .setOptions({
    title: '',
    hAxis: {title: '', viewWindow: {min: 0, max: 100}},
    vAxis: {title: '', viewWindow: {min: 0, max: 100}},
    series: {0: {color: 'red'}}
  });

  // Print the scatter plot
  print(scatterPlot);
}

// Shapefiles to process
var shapefiles = [
  {name: 'Block Groups', featureCollection: block_groups},
  {name: 'Census Tracts', featureCollection: census_tracts},
  {name: 'Urban Areas', featureCollection: urban_areas}
];

// Loop through shapefiles
shapefiles.forEach(function(item) {
  processShapefile(item.featureCollection, item.name);
});
